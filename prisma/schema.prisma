generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ChatType {
  DUAL
  GROUP
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  PENDING
}

enum UserStatus {
  ONLINE
  OFFLINE
}

model User {
  id                   Int           @id @default(autoincrement())
  firstName            String?
  lastName             String?
  phoneNumber          String        @unique
  gender               String?
  hash                 String
  hashedRt             String?
  avatar               Media?        @relation("UserAvatar", fields: [avatarId], references: [id])
  avatarId             Int?          @unique
  
  isVerified           Boolean       @default(false) 
  status               UserStatus    @default(OFFLINE)

  chats                ChatUser[]
  messages             Message[]
  sentFriendRequests   FriendRequest[] @relation("FriendRequestsSent")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestsReceived")

  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  userTokens           UserTokens[]
}

model Chat {
  id        Int        @id @default(autoincrement())
  type      ChatType   @default(DUAL)
  name      String?   
  users     ChatUser[]
  messages  Message[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ChatUser {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  role      String   @default("member") 
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id        Int      @id @default(autoincrement())
  type      MediaType
  url       String
  
  user      User?    @relation("UserAvatar")
  
  message   Message? @relation("MessageMedia", fields: [messageId], references: [id])
  messageId Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int            @id @default(autoincrement())
  type       String         @default("text")
  content    String        
  chatId     Int
  fromUserId Int
  status     MessageStatus  @default(SENT)

  chat       Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  fromUser   User           @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  
  media      Media[]        @relation("MessageMedia")
  
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model FriendRequest {
  id          Int           @id @default(autoincrement())
  fromUserId  Int
  toUserId    Int
  status      RequestStatus @default(PENDING)

  fromUser    User          @relation("FriendRequestsSent", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User          @relation("FriendRequestsReceived", fields: [toUserId], references: [id], onDelete: Cascade)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([fromUserId, toUserId]) 
}

model Otp {
  id          Int      @id @default(autoincrement())
  phoneNumber String   @unique
  code        String
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([phoneNumber])
}

model UserTokens {
  id           Int       @id @default(autoincrement())
  userId       Int
  refreshToken String    @unique
  family       String    @unique
  browserInfo  String?
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, refreshToken])
}

enum MediaType {
  IMAGE
  FILE
  VIDEO
  AUDIO
}
